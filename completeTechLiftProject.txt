using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace task1
{
    public class Candidate
    {
        public string name;
        public string cnic;
        public double cgpa;
        public string location;
        public List<Document> documents = new List<Document>();                                       // making list of  documents
        public List<Project> projectmarks = new List<Project>();                                     // making list of project marks
        Dictionary<string, Int32> dic = new Dictionary<string, int>();
        public double percentage;
    }
    public class Project
    {
        public int project1Marks;
        public int projects2Marks;
    }

    public class Document
    {
        public string docName;
        public string docPath;
        public string dataType;
    }

    class Program
    {
        static void Main(string[] args)
        {
            List<Candidate> shortlisted = new List<Candidate>();
            List<Candidate> candidates = new List<Candidate>();
            List<Candidate> topperCands = new List<Candidate>();
            Random rnd = new Random();
            Dictionary<string, string> dic = new Dictionary<string, string>();
            Candidate C;                                                                                                                    // making object of Candidate
            Document D;                                                                                                                     // making object of Documents
            Project P;                                                                                                                      // making object of Project

            //........................... Task1.......................................
            // Time Complexity of task-1 is O(N)  

            for (int i = 0; i < 15; i++)                                                                                                    // Loop will run to take hardcoded data from user
            {
                C = new Candidate();                                                                                                        // allocating new memory space for new candidate
                Console.WriteLine("************NEXT CANDIDATE {0}************", i + 1);
                Console.ReadLine();
                Console.Write("Candidate {0} Name: ", i + 1);
                C.name = Console.ReadLine();
                Console.Write("Candidate {0} CNIC: ", i + 1);
                C.cnic = Console.ReadLine();
                Console.Write("Candidate {0} CGPA: ", i + 1);
                C.cgpa = Convert.ToDouble(Console.ReadLine());
                Console.Write("Candidate {0} Location: ", i + 1);
                C.location = Console.ReadLine();
                D = new Document();
                Console.Write("Candidate {0} Document Name: ", i + 1);
                D.dataType = Console.ReadLine();
                Console.Write("Candidate {0} Document Path: ", i + 1);
                D.docPath = Console.ReadLine();
                Console.Write("Candidate {0} Document Type: ", i + 1);
                D.dataType = Console.ReadLine();
                C.documents.Add(D);


                candidates.Add(C);                                                                                                            // Add the data in candidate list
            }

            Console.WriteLine(">>>>>>>>>Data>>>>>>>>>");
            Console.ReadLine();
            for (int k = 0; k < candidates.Count; k++)
            {
                // data printing
                Console.WriteLine("|" + candidates[k].name + "|" + candidates[k].cnic + "|" + candidates[k].cgpa + "|" + candidates[k].location + "|");
                Console.ReadLine();
            }




            //.......................................Task2..................................
            // Time complexity is O(N)



            Console.WriteLine(">>>>>>>>>>Candidates with Higher CGPA>>>>>>>>>>>>>>>");
            Console.ReadLine();

            for (int k = 0; k < candidates.Count; k++)
            {
                if (candidates[k].cgpa >= 3.0)
                {
                    shortlisted.Add(candidates[k]);
                }
            }
            for (int e = 0; e < shortlisted.Count; e++)
            {
                Console.WriteLine("|" + shortlisted[e].name + "|" + shortlisted[e].cnic + "|" + shortlisted[e].cgpa + "|" + shortlisted[e].location + "|");
                Console.ReadLine();
            }


            //.........................................Task3.........................................
            // Time Complexity=O(N)

            Console.WriteLine(">>>>>>>>>>Taking the random marks for projects>>>>>>>>>>>>");
            Console.ReadLine();
            for (int j = 0; j < shortlisted.Count; j++)                                                                        // this loop will only take the marks of shortlisted students instead of taking all students
            {
                P = new Project();
                P.project1Marks = rnd.Next(1, 100);                                                                                 // taking random number
                P.projects2Marks = rnd.Next(1, 100);
                shortlisted[j].projectmarks.Add(P);                                                                                                             // add projects marks of shortlisted students                 
            }


            for (int i = 0; i < shortlisted.Count; i++)
            {
                Console.WriteLine(shortlisted[i].name + " marks in P01----" + shortlisted[i].projectmarks[0].project1Marks);
                Console.WriteLine(shortlisted[i].name + "P02----" + shortlisted[i].projectmarks[0].projects2Marks);
                Console.ReadLine();
            }

            //.......................................Task4.......................................
            // Time Complexity=O(N)

            for (int i = 0; i < shortlisted.Count; i++)
            {
                shortlisted[i].percentage = ((shortlisted[i].projectmarks[0].project1Marks + shortlisted[i].projectmarks[0].projects2Marks) / 2);                          // calculate the percentage of both projects and save the value in percentage
                if (shortlisted[i].percentage > 90)                                                                                                                              // only select the shortlisted students who have percentage more than 90
                {
                    topperCands.Add(shortlisted[i]);                                                                                                             // add the students(having percentage >90) in topperCand list
                }

            }


            //..........................................Task6........................................
            // Time Complexity=O(N)

            topperCands.Sort(delegate(Candidate x, Candidate y)
            {
                return x.percentage.CompareTo(y.percentage);
            });


            Console.WriteLine(">>>>>>>>>Candidates with Higher Percentage<<<<<<<<<");
            for (int k = 0; k < topperCands.Count; k++)
            {

                Console.WriteLine("|" + topperCands[k].name + "|" + topperCands[k].cnic + "|" + topperCands[k].cgpa + "|" + topperCands[k].location + "|" + topperCands[k].percentage + "|");
                Console.ReadLine();
            }

            //..........................................Task5........................................
            // // Time Complexity=O(N)

            for (int i = 0; i < shortlisted.Count; i++)
            {

                dic.Add(shortlisted[i].name, shortlisted[i].location);
            }

            Console.WriteLine("Same City Candiadtes are given below");

            foreach (KeyValuePair<string, string> kvp in dic)
            {
                if (kvp.Value == "Lahore")
                {
                    Console.WriteLine(kvp.Key);
                    Console.ReadLine();
                }

            }




            Console.ReadLine();

        }
    }
}